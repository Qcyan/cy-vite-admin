{
    "compilerOptions": {
        "target": "esnext", //  目标语言的版本, 编译的模板
        "moduleResolution": "node", // 模块解析策略，有"node"和"classic"两种类型
        "useDefineForClassFields": true,
        "module": "esnext", // 生成代码的模板标准
        "strict": true, // 开启所有严格的类型检查
        "jsx": "preserve", // 代码用于的开发环境:'preserve','react-native',or 'react
        "importHelpers": true, // 开启模板导入助手
        "esModuleInterop": true, // 通过导入内容创建命名空间
        "sourceMap": true, // 生成目标文件的sourceMap文件
        "resolveJsonModule": true,
        "allowSyntheticDefaultImports": true, // 允许异步导入

        "experimentalDecorators": true, // 用于指定是否启用实验性的装饰器特性
        "skipLibCheck": true, // 跳过库文件检查
        "noImplicitAny": false, // 不允许隐式的any类型
        "noImplicitThis": true, // 当this表达式的值为any类型的时候，生成一个错误
        "baseUrl": "./", // 根路径，解析非相对模块的基地址，默认是当前目录

        // 加载的声明文件包
        "types": [
            "webpack-env",
            "vite/client",
            "node"
            //        "element-plus/global"
        ],
        "typeRoots": ["./node_modules/@types/", "./types"],
        // 用于指定要包含在编译中的资源库文件
        "lib": ["esnext", "dom", "es6", "dom.iterable", "scripthost"]
    },
    // 设置模块名到基于baseUrl的路径映射/指向
    "paths": {
        "@/*": ["src/*", "./*"]
    },
    // 指定要编译的路径列表
    "include": [
        "src/**/*.ts",
        "src/**/*.d.ts",
        "src/**/*.tsx",
        "src/**/*.vue",
        "types/**/*.d.ts",
        "types/**/*.ts",
        "components.d.ts",
        "auto-imports.d.ts"
    ],
    // 排除要编译的路径列表
    "exclude": ["node_modules", "dist"]
}
